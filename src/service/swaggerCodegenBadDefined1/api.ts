/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 新增【表字段信息】的参数
 * @export
 * @interface FieldDefAddDTO
 */
export interface FieldDefAddDTO {
    /**
     * 字段描述
     * @type {string}
     * @memberof FieldDefAddDTO
     */
    description?: string;
    /**
     * 字段Id
     * @type {string}
     * @memberof FieldDefAddDTO
     */
    fieldId: string;
    /**
     * 字段名称
     * @type {string}
     * @memberof FieldDefAddDTO
     */
    fieldName: string;
    /**
     * 关联
     * @type {string}
     * @memberof FieldDefAddDTO
     */
    tableId: string;
    /**
     * 字段类型：boolean,long,double,string,date
     * @type {string}
     * @memberof FieldDefAddDTO
     */
    type: string;
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 新增
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST(body?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/datamap/fieldDef`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 新增
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST(body?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReplyVO> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).saveUsingPOST(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 新增
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST(body?: string, options?: any) {
            return DefaultApiFp(configuration).saveUsingPOST(body, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 新增
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public saveUsingPOST(body?: string, options?: any) {
        return DefaultApiFp(this.configuration).saveUsingPOST(body, options)(this.fetch, this.basePath);
    }

}
/**
 * APIApi - fetch parameter creator
 * @export
 */
export const APIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 批量删除
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBatchUsingDELETE(body?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/datamap/fieldDef`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页查询【表字段信息】
         * @param {string} [createdBy] 创建人
         * @param {Date} [createdTimeEnd] 创建时间
         * @param {Date} [createdTimeStart] 创建时间
         * @param {boolean} [deleted] 是否删除：0-否，1-是
         * @param {string} [description] 字段描述
         * @param {number} [endIndex] 
         * @param {string} [fieldId] 字段Id：table_id+field_name
         * @param {string} [fieldName] 字段名称
         * @param {string} [operatedBy] 修改人
         * @param {Date} [operatedTimeEnd] 修改时间
         * @param {Date} [operatedTimeStart] 修改时间
         * @param {number} [pageNo] 分页参数，第几页
         * @param {number} [pageSize] 分页参数，每页的条数
         * @param {number} [startIndex] 
         * @param {string} [tableId] 关联table_defination表
         * @param {string} [type] 字段类型：boolean,long,double,string,date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsingGET(createdBy?: string, createdTimeEnd?: Date, createdTimeStart?: Date, deleted?: boolean, description?: string, endIndex?: number, fieldId?: string, fieldName?: string, operatedBy?: string, operatedTimeEnd?: Date, operatedTimeStart?: Date, pageNo?: number, pageSize?: number, startIndex?: number, tableId?: string, type?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/datamap/fieldDef`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (createdTimeEnd !== undefined) {
                localVarQueryParameter['createdTimeEnd'] = (createdTimeEnd as any).toISOString();
            }

            if (createdTimeStart !== undefined) {
                localVarQueryParameter['createdTimeStart'] = (createdTimeStart as any).toISOString();
            }

            if (deleted !== undefined) {
                localVarQueryParameter['deleted'] = deleted;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (endIndex !== undefined) {
                localVarQueryParameter['endIndex'] = endIndex;
            }

            if (fieldId !== undefined) {
                localVarQueryParameter['fieldId'] = fieldId;
            }

            if (fieldName !== undefined) {
                localVarQueryParameter['fieldName'] = fieldName;
            }

            if (operatedBy !== undefined) {
                localVarQueryParameter['operatedBy'] = operatedBy;
            }

            if (operatedTimeEnd !== undefined) {
                localVarQueryParameter['operatedTimeEnd'] = (operatedTimeEnd as any).toISOString();
            }

            if (operatedTimeStart !== undefined) {
                localVarQueryParameter['operatedTimeStart'] = (operatedTimeStart as any).toISOString();
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (tableId !== undefined) {
                localVarQueryParameter['tableId'] = tableId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT(body?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/datamap/fieldDef`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APIApi - functional programming interface
 * @export
 */
export const APIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 批量删除
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBatchUsingDELETE(body?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FieldDefAddDTO> {
            const localVarFetchArgs = APIApiFetchParamCreator(configuration).deleteBatchUsingDELETE(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 分页查询【表字段信息】
         * @param {string} [createdBy] 创建人
         * @param {Date} [createdTimeEnd] 创建时间
         * @param {Date} [createdTimeStart] 创建时间
         * @param {boolean} [deleted] 是否删除：0-否，1-是
         * @param {string} [description] 字段描述
         * @param {number} [endIndex] 
         * @param {string} [fieldId] 字段Id：table_id+field_name
         * @param {string} [fieldName] 字段名称
         * @param {string} [operatedBy] 修改人
         * @param {Date} [operatedTimeEnd] 修改时间
         * @param {Date} [operatedTimeStart] 修改时间
         * @param {number} [pageNo] 分页参数，第几页
         * @param {number} [pageSize] 分页参数，每页的条数
         * @param {number} [startIndex] 
         * @param {string} [tableId] 关联table_defination表
         * @param {string} [type] 字段类型：boolean,long,double,string,date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsingGET(createdBy?: string, createdTimeEnd?: Date, createdTimeStart?: Date, deleted?: boolean, description?: string, endIndex?: number, fieldId?: string, fieldName?: string, operatedBy?: string, operatedTimeEnd?: Date, operatedTimeStart?: Date, pageNo?: number, pageSize?: number, startIndex?: number, tableId?: string, type?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReplyVOPageVOFieldDefListVO> {
            const localVarFetchArgs = APIApiFetchParamCreator(configuration).listUsingGET(createdBy, createdTimeEnd, createdTimeStart, deleted, description, endIndex, fieldId, fieldName, operatedBy, operatedTimeEnd, operatedTimeStart, pageNo, pageSize, startIndex, tableId, type, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 修改
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT(body?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReplyVOFieldDefShowVO> {
            const localVarFetchArgs = APIApiFetchParamCreator(configuration).updateUsingPUT(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * APIApi - factory interface
 * @export
 */
export const APIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 批量删除
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBatchUsingDELETE(body?: string, options?: any) {
            return APIApiFp(configuration).deleteBatchUsingDELETE(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 分页查询【表字段信息】
         * @param {string} [createdBy] 创建人
         * @param {Date} [createdTimeEnd] 创建时间
         * @param {Date} [createdTimeStart] 创建时间
         * @param {boolean} [deleted] 是否删除：0-否，1-是
         * @param {string} [description] 字段描述
         * @param {number} [endIndex] 
         * @param {string} [fieldId] 字段Id：table_id+field_name
         * @param {string} [fieldName] 字段名称
         * @param {string} [operatedBy] 修改人
         * @param {Date} [operatedTimeEnd] 修改时间
         * @param {Date} [operatedTimeStart] 修改时间
         * @param {number} [pageNo] 分页参数，第几页
         * @param {number} [pageSize] 分页参数，每页的条数
         * @param {number} [startIndex] 
         * @param {string} [tableId] 关联table_defination表
         * @param {string} [type] 字段类型：boolean,long,double,string,date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsingGET(createdBy?: string, createdTimeEnd?: Date, createdTimeStart?: Date, deleted?: boolean, description?: string, endIndex?: number, fieldId?: string, fieldName?: string, operatedBy?: string, operatedTimeEnd?: Date, operatedTimeStart?: Date, pageNo?: number, pageSize?: number, startIndex?: number, tableId?: string, type?: string, options?: any) {
            return APIApiFp(configuration).listUsingGET(createdBy, createdTimeEnd, createdTimeStart, deleted, description, endIndex, fieldId, fieldName, operatedBy, operatedTimeEnd, operatedTimeStart, pageNo, pageSize, startIndex, tableId, type, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 修改
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT(body?: string, options?: any) {
            return APIApiFp(configuration).updateUsingPUT(body, options)(fetch, basePath);
        },
    };
};

/**
 * APIApi - object-oriented interface
 * @export
 * @class APIApi
 * @extends {BaseAPI}
 */
export class APIApi extends BaseAPI {
    /**
     * 
     * @summary 批量删除
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public deleteBatchUsingDELETE(body?: string, options?: any) {
        return APIApiFp(this.configuration).deleteBatchUsingDELETE(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 分页查询【表字段信息】
     * @param {string} [createdBy] 创建人
     * @param {Date} [createdTimeEnd] 创建时间
     * @param {Date} [createdTimeStart] 创建时间
     * @param {boolean} [deleted] 是否删除：0-否，1-是
     * @param {string} [description] 字段描述
     * @param {number} [endIndex] 
     * @param {string} [fieldId] 字段Id：table_id+field_name
     * @param {string} [fieldName] 字段名称
     * @param {string} [operatedBy] 修改人
     * @param {Date} [operatedTimeEnd] 修改时间
     * @param {Date} [operatedTimeStart] 修改时间
     * @param {number} [pageNo] 分页参数，第几页
     * @param {number} [pageSize] 分页参数，每页的条数
     * @param {number} [startIndex] 
     * @param {string} [tableId] 关联table_defination表
     * @param {string} [type] 字段类型：boolean,long,double,string,date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public listUsingGET(createdBy?: string, createdTimeEnd?: Date, createdTimeStart?: Date, deleted?: boolean, description?: string, endIndex?: number, fieldId?: string, fieldName?: string, operatedBy?: string, operatedTimeEnd?: Date, operatedTimeStart?: Date, pageNo?: number, pageSize?: number, startIndex?: number, tableId?: string, type?: string, options?: any) {
        return APIApiFp(this.configuration).listUsingGET(createdBy, createdTimeEnd, createdTimeStart, deleted, description, endIndex, fieldId, fieldName, operatedBy, operatedTimeEnd, operatedTimeStart, pageNo, pageSize, startIndex, tableId, type, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 修改
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public updateUsingPUT(body?: string, options?: any) {
        return APIApiFp(this.configuration).updateUsingPUT(body, options)(this.fetch, this.basePath);
    }

}
